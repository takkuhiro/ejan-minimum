"""Image generation service using Nano Banana (Gemini 2.5 Flash Image Preview)."""

import base64
import uuid
from enum import Enum
from typing import List, Optional
from dataclasses import dataclass

from google.genai import types

from app.services.ai_client import AIClient, AIClientAPIError
from app.services.storage import StorageService


class Gender(str, Enum):
    """Gender options for style generation."""

    MALE = "male"
    FEMALE = "female"
    NEUTRAL = "neutral"


class ImageGenerationError(Exception):
    """Exception raised during image generation."""

    pass


@dataclass
class StyleGeneration:
    """Represents a generated style with image."""

    id: str
    title: str
    description: str
    image_url: str


# Style variations for different looks
STYLE_VARIATIONS = [
    "Natural daytime look with subtle enhancements",
    "Elegant evening style with sophisticated makeup",
    "Bold and trendy party look with dramatic features",
]


def generate_style_prompt(
    gender: Gender, style_index: int, custom_text: Optional[str] = None
) -> str:
    """Generate prompt for style creation.

    Args:
        gender: Gender for style generation.
        style_index: Index of style variation (0-2).
        custom_text: Optional custom request text.

    Returns:
        Generated prompt string.
    """
    # Ensure style_index is within bounds
    style_variation = STYLE_VARIATIONS[style_index % len(STYLE_VARIATIONS)]

    # Gender-specific language
    gender_text = {
        Gender.MALE: "male/men's",
        Gender.FEMALE: "female/women's",
        Gender.NEUTRAL: "gender-neutral/unisex",
    }[gender]

    base_prompt = f"""Generate a realistic image of the given face photo with a perfect {gender_text} hairstyle and makeup style.
{style_variation}
Please make the style natural and in line with current trends. Avoid anything too bizarre or extreme.
Keep the facial features and identity unchanged, only modify the hairstyle and makeup.
Provide a brief description of the style and steps to achieve this look."""

    if custom_text:
        base_prompt += f"\n\nAdditional request: {custom_text}"

    return base_prompt


class ImageGenerationService:
    """Service for generating styled images using Nano Banana."""

    def __init__(self, ai_client: AIClient, storage_service: StorageService):
        """Initialize image generation service.

        Args:
            ai_client: AI client for Gemini API.
            storage_service: Storage service for uploading images.
        """
        self.ai_client = ai_client
        self.storage_service = storage_service
        self.model_name = "gemini-2.5-flash-image-preview"

    async def generate_single_style(
        self,
        image: types.Image,
        gender: Gender,
        style_index: int,
        custom_text: Optional[str] = None,
    ) -> StyleGeneration:
        """Generate a single style for the given image.

        Args:
            image: Input face image.
            gender: Gender for style generation.
            style_index: Index of style variation (0-2).
            custom_text: Optional custom request text.

        Returns:
            Generated style with image URL.

        Raises:
            ImageGenerationError: If generation fails.
        """
        try:
            # Generate prompt
            prompt = generate_style_prompt(gender, style_index, custom_text)

            # Call AI API
            response = self.ai_client.generate_content(
                model=self.model_name,
                prompt=prompt,
                image=image,
                contents=[prompt, image],
            )

            # Extract text description
            description = self.ai_client.extract_text_from_response(response)
            if not description:
                description = f"Style {style_index + 1} for {gender.value}"

            # Extract generated image
            image_data = self.ai_client.extract_image_from_response(response)
            if not image_data:
                raise ImageGenerationError("No image generated by AI")

            # Upload to storage
            try:
                # Determine content type
                content_type = "image/png"
                image_url = self.storage_service.upload_image(image_data, content_type)
            except Exception as e:
                raise ImageGenerationError(f"Failed to upload image: {e}")

            # Create style object
            style_id = str(uuid.uuid4())
            title = (
                self.extract_title_from_description(description)
                or f"Style {style_index + 1}"
            )

            return StyleGeneration(
                id=style_id, title=title, description=description, image_url=image_url
            )

        except AIClientAPIError as e:
            raise ImageGenerationError(f"AI generation failed: {e}")
        except Exception as e:
            raise ImageGenerationError(f"Unexpected error: {e}")

    async def generate_three_styles(
        self, image: types.Image, gender: Gender, custom_text: Optional[str] = None
    ) -> List[StyleGeneration]:
        """Generate three different styles for the given image.

        Args:
            image: Input face image.
            gender: Gender for style generation.
            custom_text: Optional custom request text.

        Returns:
            List of three generated styles.

        Raises:
            ImageGenerationError: If generation fails.
        """
        styles = []
        errors = []

        for i in range(3):
            try:
                style = await self.generate_single_style(
                    image=image, gender=gender, style_index=i, custom_text=custom_text
                )
                styles.append(style)
            except ImageGenerationError as e:
                errors.append(f"Style {i+1}: {e}")

        if len(styles) < 3:
            error_msg = "Failed to generate all styles. " + " ".join(errors)
            raise ImageGenerationError(error_msg)

        return styles

    async def process_upload_and_generate(
        self, base64_photo: str, gender: Gender, custom_text: Optional[str] = None
    ) -> List[StyleGeneration]:
        """Process uploaded photo and generate styles.

        Args:
            base64_photo: Base64 encoded photo.
            gender: Gender for style generation.
            custom_text: Optional custom request text.

        Returns:
            List of generated styles.

        Raises:
            ImageGenerationError: If processing fails.
        """
        try:
            # Decode base64 image
            image_data = base64.b64decode(base64_photo)
        except Exception as e:
            raise ImageGenerationError(f"Invalid base64 image: {e}")

        # Validate size (10MB limit)
        if not self.validate_image_size(image_data):
            raise ImageGenerationError("Image size exceeds 10MB limit")

        # Create Image object for API
        image = types.Image(
            image_bytes=image_data,
            mime_type="image/jpeg",  # Assume JPEG, API will handle other formats
        )

        # Generate styles
        return await self.generate_three_styles(image, gender, custom_text)

    def validate_image_size(self, image_data: bytes, max_size_mb: int = 10) -> bool:
        """Validate image size is within limit.

        Args:
            image_data: Image bytes.
            max_size_mb: Maximum size in MB.

        Returns:
            True if size is valid, False otherwise.
        """
        size_mb = len(image_data) / (1024 * 1024)
        return size_mb <= max_size_mb

    def extract_title_from_description(self, description: str) -> str:
        """Extract title from description text.

        Args:
            description: Full description text.

        Returns:
            Extracted title or default.
        """
        if not description:
            return "Style"

        # Try to extract first line or sentence as title
        lines = description.strip().split("\n")
        if lines:
            # Check for common title patterns
            first_line = lines[0].strip()
            if ":" in first_line:
                return first_line.split(":")[0].strip()
            elif "-" in first_line:
                return first_line.split("-")[0].strip()
            elif len(first_line) < 50:  # Short enough to be a title
                return first_line

        return "Style"
